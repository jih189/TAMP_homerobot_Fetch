# Cogrob Manipulation Workspace

[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)

Extendable Action Task and Motion Planning System for Home-Mobile-Robot(Fetch)
## Description

This open-loop manipulation task and motion planner is designed for the Cogrob home robot project on the Fetch robot. The goal of this planner is generating a feasible robot state trojectory based on a given simple task description to manipulate only one graspable rigid object (not multiple). In this system, we have a assumption the target object is in the camera view and there is clearly a feasible path for the robot to approach and manipulation it. The pipeline will be the following:

1. Action sequence generation: Given a simple text description, the robot will split it into a action sequence where those action are predefined.
2. Scene analysis: The robot scans the environment and classify it into three parts: first, target object; second, supporting surface(which is usually table, and it will be represented by a flat plane); third, obstacles(which will be represented by a set of bounding boxes).
3. Task and motion planning: Given the action sequence and the planning scene(which is generated by scene analysis), the task and motion planner generates the robot state trajectory for accomplishing the task.
4. Execution: Pass the robot state trajectory to the robot.

Furthermore, this workspace includes a simulation platform based on Coppeliasim to evaluate the manipulation system. Additionally, we offer a Dockerfile to help developers transfer this workspace to their computers effortlessly. 

One must be keep in mind is that this is manipulation system is a open loop system. That is, once the state and obstacle are given, this system plans the robot trajectory to finish the desired task, then pass to the robot for exuection. In other word, For each manipulation action, we provide a corresponding ROS server. Moreover, this task and motion planning system offers a Markov Decision Process-based task planner to handle replanning in case an action fails.

## Current State of Each Project Component

### Planning scene manager

### Task planner

### (Constrained) Motion Planner

### Deep learning system

## Getting Started

### Dependencies

- Ubuntu 18.04
- ROS melodic (Because of Fetch Robot)
- Docker

### Installing

Provide step-by-step instructions for how to install your project.

### Usage

Provide examples and instructions for how to use your project. This section should be detailed enough to help someone who's new to your project get started, but not so detailed that it overwhelms them.

## Contributing

As mentioned above, all manipulation developer can include their action into this system by building a ROS action server and include the customized action into task planner. Please keep in mind, the action server must follow certain template which we have put some example in this repo.

## Future Work

Our current manipulation system operates as an open-loop system, but we plan to convert it into a semi-closed loop system in the future. This means that the task planner will use the outcome of previous manipulations to make informed decisions about the next task action. If an action fails, the task planner will automatically replan the action sequence based on the current state. We face a challenge in this process, as the failure state may be unexpected. To address this, we will regenerate a Markov Decision Process structure action graph for the failure state. We hope to reuse the previous MDP structure action graph to improve efficiency and achieve better results in real-world scenarios.
## Authors

- Jiaming Hu


## License

Include information about the license for your project, along with any restrictions or requirements that come with it.

## Acknowledgments

If your project was built using someone else's work, give credit to the original author and provide a link to their work. You can also use this section to thank anyone who helped you with your project.
